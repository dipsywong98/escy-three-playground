{"version":3,"sources":["ThreeViewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThreeViewer","root","useRef","useState","renderer","camera","set3","resize","useCallback","div","current","undefined","aspect","clientWidth","clientHeight","updateProjectionMatrix","setSize","useEffect","scene","THREE","appendChild","domElement","geometry","material","color","cube","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","window","addEventListener","removeEventListener","ref","style","width","height","overflow","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAIaA,EAAc,WACzB,IAAMC,EAAOC,iBAAuB,MADL,EAEMC,mBAA0E,IAFhF,0BAEtBC,EAFsB,EAEtBA,SAAUC,EAFY,EAEZA,OAAUC,EAFE,KAIzBC,EAASC,uBAAY,WACzB,IAAMC,EAAMR,EAAKS,QACL,OAARD,QAA6BE,IAAbP,QAAqCO,IAAXN,IAC5CA,EAAOO,OAASH,EAAII,YAAcJ,EAAIK,aACtCT,EAAOU,yBACPX,EAASY,QAAQP,EAAII,YAAaJ,EAAIK,iBAEvC,CAACT,EAAQD,IAoCZ,OAnCAa,qBAAU,WACR,GAAqB,OAAjBhB,EAAKS,cAAiCC,IAAbP,EAAwB,CACnD,IAAMK,EAAMR,EAAKS,QACXQ,EAAQ,IAAIC,IACZd,EAAS,IAAIc,IAAwB,GAAIV,EAAII,YAAcJ,EAAIK,aAAc,GAAK,KAElFV,EAAW,IAAIe,IACrBb,EAAK,CAAEF,WAAUC,WACjBI,EAAIW,YAAYhB,EAASiB,YACzB,IAAMC,EAAW,IAAIH,IACfI,EAAW,IAAIJ,IAAwB,CAAEK,MAAO,QAChDC,EAAO,IAAIN,IAAWG,EAAUC,GACtCL,EAAMQ,IAAID,GAEVpB,EAAOsB,SAASC,EAAI,GAEJ,SAAVC,IACJC,sBAAsBD,GACtBJ,EAAKM,SAASC,GAAK,IACnBP,EAAKM,SAASE,GAAK,IACnB7B,EAAS8B,OAAOhB,EAAOb,GAEzBwB,MAED,CAACzB,IACJa,qBAAU,WACR,IAAMR,EAAMR,EAAKS,QACjB,QAAiBC,IAAbP,GAAkC,OAARK,EAG5B,OAFA0B,OAAOC,iBAAiB,SAAU7B,GAClCA,IACO,WACL4B,OAAOE,oBAAoB,SAAU9B,MAGxC,CAACH,EAAUG,EAAQF,IACf,yBAAKiC,IAAKrC,EAAMsC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,SAAU,aC1C9DC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.282ab807.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react'\nimport * as THREE from 'three'\n// import { System, World } from 'ecsy'\n\nexport const ThreeViewer = () => {\n  const root = useRef<HTMLDivElement>(null)\n  const [{ renderer, camera }, set3] = useState<{ renderer?: THREE.Renderer, camera?: THREE.PerspectiveCamera }>({})\n  // const [system, setSystem] = useState<World|null>(null)\n  const resize = useCallback((): void => {\n    const div = root.current\n    if (div !== null && renderer !== undefined && camera !== undefined) {\n      camera.aspect = div.clientWidth / div.clientHeight\n      camera.updateProjectionMatrix()\n      renderer.setSize(div.clientWidth, div.clientHeight)\n    }\n  }, [camera, renderer])\n  useEffect(() => {\n    if (root.current !== null && renderer === undefined) {\n      const div = root.current\n      const scene = new THREE.Scene()\n      const camera = new THREE.PerspectiveCamera(75, div.clientWidth / div.clientHeight, 0.1, 1000)\n\n      const renderer = new THREE.WebGLRenderer()\n      set3({ renderer, camera })\n      div.appendChild(renderer.domElement)\n      const geometry = new THREE.BoxGeometry()\n      const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 })\n      const cube = new THREE.Mesh(geometry, material)\n      scene.add(cube)\n\n      camera.position.z = 5\n\n      const animate = (): void => {\n        requestAnimationFrame(animate)\n        cube.rotation.x += 0.01\n        cube.rotation.y += 0.01\n        renderer.render(scene, camera)\n      }\n      animate()\n    }\n  }, [renderer])\n  useEffect(() => {\n    const div = root.current\n    if (renderer !== undefined && div !== null) {\n      window.addEventListener('resize', resize)\n      resize()\n      return () => {\n        window.removeEventListener('resize', resize)\n      }\n    }\n  }, [renderer, resize, camera])\n  return <div ref={root} style={{ width: '100vw', height: '100vh', overflow: 'hidden' }}/>\n}\n","import React from 'react';\nimport { ThreeViewer } from './ThreeViewer'\n\nfunction App() {\n  return (\n    <ThreeViewer/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}